1. הדרישות ההכרחיות שעל הטיפוס T לקיים:
	1) בנאי (Constructor) - לטיפוסים בד"כ צריך להיות סוג של בנאי כדי לאתחל אותם עם ערך מתאים.
	2) הורס (Destructor) - לטיפוסים בד"כ צריך להיות סוג של הורס כדי לנהל את הזכרון ושחרורו.
	3) אופרטור < (גדול מ) - כדי למיין את הרשימה.
	
	
2. אם היינו נותנים למשתמש להשתמש באיטרטור non-const זה היה מאפשר מחיקה והוספת איברים תוך כדי איתרציה על הרשימה וזה גורר אינוולידיצה של כל האיטרטורים שנוצרו לפני השינוי ברשימה,	
שימוש באיטרטור שעבר אינוולידציה גורר התנהגות לא מוגדרת, כמו גישה למקום לא חוקי בזכרון או למקום שלא התכוונו אליו.

3. בפרויקט הצד של הסטודנטית, הסטודנטית יכולה לסנן את הרשימה על פי מספר שהמשתמש מכניס בזמן ריצה. משתמשים (ladmda expression) שמקבלת את i (המספר הלא הידוע שרוצים לבדוק אם מספרי הרשימה מתחלקים בו).
	(והמשתמש מכניס את המספר הזה) ו lambda מחזירה true אם המספר ברשימה מתחלק ב i ו false אחרת. אם קיבלנו true אזי המספר נוסף לרשימה החדשה שרוצים להחזיר מהפונקציה filter, אחרת לא.